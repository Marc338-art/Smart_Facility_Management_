
        
- id: "876213876321"
  alias: "Heiztemperatur per MQTT senden"
  description: Sendet den aktuellen Wert von input_number.heating_temperature_c005 über MQTT
  trigger:
    - platform: state
      entity_id: 
        - binary_sensor.bewegungssensor_c005
        #- binary_sensor.c009
      from: "off"  # Nur wenn der Zustand von "off" nach "on" wechselt
      to: "on"  # Nur wenn der Zustand zu "on" wechselt
    
  condition: []
  action:
    - service: mqtt.publish
      data:
        topic: "ha_main"
        payload: "{{ state_attr(trigger.entity_id, 'friendly_name') }}"
        retain: false
  mode: single



- alias: Temperatur auf alle Geräte in Gruppen C009 und Modellhaus anwenden
  trigger:
    - platform: time_pattern
      seconds: "/10"

  variables:
    climate_entities_c009: "{{ expand('group.c009') | map(attribute='entity_id') | list }}"
    climate_entities_modellhaus: "{{ expand('group.modellhaus') | map(attribute='entity_id') | list }}"
    temperatur_c009: "{{ states('input_number.heating_temperature_c009') | float }}"
    temperatur_modellhaus: "{{ states('input_number.heating_temperature_c005') | float }}"

  action:
  - choose:
      - conditions:
          - condition: state
            entity_id: binary_sensor.c009
            state: "off"
        sequence:
          - repeat:
              for_each: "{{ climate_entities_c009 }}"
              sequence:
                - service: climate.set_temperature
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    temperature: "{{ temperatur_c009 }}"

  - choose:
      - conditions:
          - condition: state
            entity_id: script.heating
            state: "off"
          - condition: state
            entity_id: binary_sensor.c005
            state: "off"
        sequence:
          - repeat:
              for_each: "{{ climate_entities_modellhaus }}"
              sequence:
                - service: climate.set_temperature
                  target:
                    entity_id: "{{ repeat.item }}"
                  data:
                    temperature: "{{ temperatur_modellhaus }}"


  
  
- id: "heizung_neu_starten_bei_temp_aenderung"
  alias: Heizung bei Änderung am Wandthermostat starten
  trigger:
    - platform: state
      entity_id: climate.wandthermostat_c005
      attribute: temperature

  condition:
    - condition: template
      value_template: "{{ trigger.to_state.attributes.temperature != trigger.from_state.attributes.temperature }}"

  action:
    - service: script.heating
      data:
        temperature: "{{ state_attr('climate.wandthermostat_c005', 'temperature') | float }}"
  mode: restart  # Hier den mode auf 'restart' setzen, um das Neustarten der Automation zu ermöglichen



  

  
- id: "fenster_heizung_aus"
  alias: "Fenster offen – Heizungen ausschalten"
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.c009
        - binary_sensor.c005
      to: "on"

  condition:
    - condition: state
      entity_id: script.heating
      state: "off"

  action:
  
    - if:
        - condition: state
          entity_id: binary_sensor.c005
          state: "on"
      then:
        - service: climate.set_temperature
          target:
            entity_id: "{{ state_attr('group.modellhaus', 'entity_id') }}"
          data:
            temperature: 17
    - if:
        - condition: state
          entity_id: binary_sensor.c009
          state: "on"
      then:
        - service: climate.set_temperature
          target:
            entity_id: "{{ state_attr('group.c009', 'entity_id') }}"
          data:
            temperature: 17

    

  mode: single



  
  